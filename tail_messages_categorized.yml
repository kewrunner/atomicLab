---
- name: Extract categorized tails from logs (Ubuntu 22/24 + RHEL-like)
  hosts: all
  gather_facts: true
  vars:
    tail_count: 10
    re_user_login: '(sshd.*Accepted|systemd-logind|LOGIN|pam_unix.*session)'
    re_security: '(sudo|polkit|audit|security)'
    re_system: '(kernel:|systemd|NetworkManager|udevd|crond|chronyd)'

  tasks:
    - name: Compute distro flags
      ansible.builtin.set_fact:
        is_ubuntu: "{{ (ansible_facts.distribution | lower) == 'ubuntu' }}"

    - name: Build candidate lists (always lists)
      ansible.builtin.set_fact:
        login_candidates: >-
          {{ (is_ubuntu | ternary(
                ['/var/log/auth.log', '/var/log/secure', '/var/log/messages'],
                ['/var/log/secure', '/var/log/messages', '/var/log/auth.log']
              )) }}
        security_candidates: >-
          {{ (is_ubuntu | ternary(
                ['/var/log/auth.log', '/var/log/secure', '/var/log/messages'],
                ['/var/log/secure', '/var/log/messages', '/var/log/auth.log']
              )) }}
        system_candidates: >-
          {{ (is_ubuntu | ternary(
                ['/var/log/syslog', '/var/log/messages'],
                ['/var/log/messages', '/var/log/syslog']
              )) }}

    - name: Stat login candidate logs
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ login_candidates }}"
      register: login_stats

    - name: Stat security candidate logs
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ security_candidates }}"
      register: security_stats

    - name: Stat system candidate logs
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ system_candidates }}"
      register: system_stats

    - name: Pick first existing file per category
      ansible.builtin.set_fact:
        login_log: "{{ (login_stats.results   | selectattr('stat.exists') | map(attribute='stat.path') | list | first) | default(omit) }}"
        security_log: "{{ (security_stats.results | selectattr('stat.exists') | map(attribute='stat.path') | list | first) | default(omit) }}"
        system_log: "{{ (system_stats.results  | selectattr('stat.exists') | map(attribute='stat.path') | list | first) | default(omit) }}"

    - name: Read login log (if found)
      when: login_log is defined
      ansible.builtin.slurp:
        src: "{{ login_log }}"
      register: login_raw

    - name: Read security log (if found)
      when: security_log is defined
      ansible.builtin.slurp:
        src: "{{ security_log }}"
      register: security_raw

    - name: Read system log (if found)
      when: system_log is defined
      ansible.builtin.slurp:
        src: "{{ system_log }}"
      register: system_raw

    - name: Parse lines for each category (empty list if missing)
      ansible.builtin.set_fact:
        login_lines: "{{ (login_raw.content   | b64decode | split('\n')) if (login_log   is defined) else [] }}"
        security_lines: "{{ (security_raw.content | b64decode | split('\n')) if (security_log is defined) else [] }}"
        system_lines: "{{ (system_raw.content  | b64decode | split('\n')) if (system_log  is defined) else [] }}"

    - name: Build categorized tails (use slicing instead of tail filter)
      ansible.builtin.set_fact:
        user_login_tail: >-
          {{ (login_lines   | select('search', re_user_login) | list)[-tail_count:] }}
        security_tail: >-
          {{ (security_lines | select('search', re_security)   | list)[-tail_count:] }}
        system_tail: >-
          {{ (system_lines  | select('search', re_system)      | list)[-tail_count:] }}

    - name: Report log sources picked
      ansible.builtin.debug:
        msg:
          login_log: "{{ login_log | default('not found') }}"
          security_log: "{{ security_log | default('not found') }}"
          system_log: "{{ system_log | default('not found') }}"

    - name: Report last 10 user login lines
      ansible.builtin.debug:
        msg: "{{ user_login_tail }}"

    - name: Report last 10 security lines
      ansible.builtin.debug:
        msg: "{{ security_tail }}"

    - name: Report last 10 system lines
      ansible.builtin.debug:
        msg: "{{ system_tail }}"
