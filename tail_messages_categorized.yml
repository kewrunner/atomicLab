---
- name: Extract categorized tails from logs (Ubuntu 22/24 + RHEL-like)
  hosts: all
  gather_facts: true
  vars:
    tail_count: 10

    # Broad patterns; tune to your environment
    re_user_login: '(sshd.*Accepted|systemd-logind|LOGIN|pam_unix.*session)'
    re_security:   '(sudo|polkit|audit|security)'
    re_system:     '(kernel:|systemd|NetworkManager|udevd|crond|chronyd)'

  tasks:
    - name: Compute distro flags
      ansible.builtin.set_fact:
        is_ubuntu: "{{ (ansible_facts.distribution | lower) == 'ubuntu' }}"

    - name: Build candidate lists (always lists)
      ansible.builtin.set_fact:
        login_candidates: >-
          {{ is_ubuntu
             | ternary(['/var/log/auth.log', '/var/log/secure', '/var/log/messages'],
                       ['/var/log/secure',   '/var/log/messages', '/var/log/auth.log']) }}
        security_candidates: >-
          {{ is_ubuntu
             | ternary(['/var/log/auth.log', '/var/log/secure', '/var/log/messages'],
                       ['/var/log/secure',   '/var/log/messages', '/var/log/auth.log']) }}
        system_candidates: >-
          {{ is_ubuntu
             | ternary(['/var/log/syslog', '/var/log/messages'],
                       ['/var/log/messages','/var/log/syslog']) }}

    - name: Stat login candidate logs
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ login_candidates }}"
      register: login_stats

    - name: Stat security candidate logs
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ security_candidates }}"
      register: security_stats

    - name: Stat system candidate logs
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ system_candidates }}"
      register: system_stats

    - name: Pick first existing file per category
      ansible.builtin.set_fact:
        login_log:   "{{ (login_stats.results   | selectattr('stat.exists') | map(attribute='stat.path') | list | first) | default(omit) }}"
        security_log:"{{ (security_stats.results| selectattr('stat.exists') | map(attribute='stat.path') | list | first) | default(omit) }}"
        system_log:  "{{ (system_stats.results  | selectattr('stat.exists') | map(attribute='stat.path') | list | first) | default(omit) }}"

    - name: Read chosen logs (if found)
      ansible.builtin.slurp:
        src: "{{ item }}"
      loop: "{{ [login_log | default(omit), security_log | default(omit), system_log | default(omit)] | select('defined') | list }}"
      register: slurps

    - name: Normalize slurped content into vars (text + lines)
      ansible.builtin.set_fact:
        login_text: >-
          {{ (slurps.results | selectattr('source','equalto', login_log)   | map(attribute='content') | list | first | default('') | b64decode)
             | regex_replace('\r\n?','\n') if login_log is defined else '' }}
        security_text: >-
          {{ (slurps.results | selectattr('source','equalto', security_log) | map(attribute='content') | list | first | default('') | b64decode)
             | regex_replace('\r\n?','\n') if security_log is defined else '' }}
        system_text: >-
          {{ (slurps.results | selectattr('source','equalto', system_log)   | map(attribute='content') | list | first | default('') | b64decode)
             | regex_replace('\r\n?','\n') if system_log is defined else '' }}
        login_lines:   "{{ (login_text   | default('')) | split('\n') }}"
        security_lines:"{{ (security_text | default('')) | split('\n') }}"
        system_lines:  "{{ (system_text   | default('')) | split('\n') }}"

    - name: Build categorized tails
      ansible.builtin.set_fact:
        user_login_tail: "{{ (login_lines   | select('search', re_user_login) | list) | tail(tail_count) }}"
        security_tail:   "{{ (security_lines| select('search', re_security)   | list) | tail(tail_count) }}"
        system_tail:     "{{ (system_lines  | select('search', re_system)     | list) | tail(tail_count) }}"

    - name: Report log sources picked
      ansible.builtin.debug:
        msg:
          login_log:   "{{ login_log   | default('not found') }}"
          security_log:"{{ security_log| default('not found') }}"
          system_log:  "{{ system_log  | default('not found') }}"

    - name: Report last 10 user login lines
      ansible.builtin.debug:
        msg: "{{ user_login_tail }}"

    - name: Report last 10 security lines
      ansible.builtin.debug:
        msg: "{{ security_tail }}"

    - name: Report last 10 system lines
      ansible.builtin.debug:
        msg: "{{ system_tail }}"
