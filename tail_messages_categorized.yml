---
- name: Extract categorized tails from logs (cross-distro)
  hosts: all
  gather_facts: true   # Needed for ansible_distribution fact
  vars:
    tail_count: 10

  tasks:
    - name: Choose candidate log files by distribution
      ansible.builtin.set_fact:
        candidate_logs: >-
          {{ 
            (ansible_distribution in ['Ubuntu'] | ternary(
               ['/var/log/auth.log', '/var/log/syslog'],
               ['/var/log/messages']
             ))
          }}

    - name: Verify which log files exist
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ candidate_logs }}"
      register: log_stats

    - name: Pick the first existing log file
      ansible.builtin.set_fact:
        log_path: "{{ (log_stats.results | selectattr('stat.exists') | list | first).stat.path }}"
      when: (log_stats.results | selectattr('stat.exists') | list | length) > 0

    - name: Fail if no usable log file found
      ansible.builtin.fail:
        msg: "No suitable log file found for {{ ansible_distribution }}"
      when: log_path is not defined

    - name: Read selected log file
      ansible.builtin.slurp:
        src: "{{ log_path }}"
      register: log_raw

    - name: Parse log lines
      ansible.builtin.set_fact:
        log_lines: "{{ log_raw.content | b64decode | splitlines() }}"

    - name: Select last 10 user login events
      ansible.builtin.set_fact:
        user_login_lines: "{{ log_lines | select('search', '(sshd.*Accepted|systemd-logind|LOGIN|pam_unix.*session)') | list | tail(tail_count) }}"

    - name: Select last 10 security events
      ansible.builtin.set_fact:
        security_lines: "{{ log_lines | select('search', '(sudo|polkit|audit|security)') | list | tail(tail_count) }}"

    - name: Select last 10 system events
      ansible.builtin.set_fact:
        system_lines: "{{ log_lines | select('search', '(kernel:|systemd|NetworkManager|udevd|crond|chronyd)') | list | tail(tail_count) }}"

    - name: Report last 10 user login lines
      ansible.builtin.debug:
        msg: "{{ user_login_lines }}"

    - name: Report last 10 security lines
      ansible.builtin.debug:
        msg: "{{ security_lines }}"

    - name: Report last 10 system lines
      ansible.builtin.debug:
        msg: "{{ system_lines }}"
