---
- name: Observe CPU load over 3 minutes
  hosts: all
  gather_facts: false

  vars:
    observe_minutes: 3
    load_start: {}
    load_end: {}

  tasks:
    - name: Read initial /proc/loadavg
      ansible.builtin.slurp:
        src: /proc/loadavg
      register: _load_start

    - name: Parse initial load averages
      ansible.builtin.set_fact:
        load_start: >-
          {{
            {
              'timestamp': ansible_date_time.iso8601 if (ansible_date_time is defined) else '',
              'raw': (_load_start.content | b64decode | trim),
              'avg_1':  (_load_start.content | b64decode | trim).split()[0] | float,
              'avg_5':  (_load_start.content | b64decode | trim).split()[1] | float,
              'avg_15': (_load_start.content | b64decode | trim).split()[2] | float
            }
          }}

    - name: Wait for {{ observe_minutes }} minutes
      ansible.builtin.pause:
        minutes: "{{ observe_minutes }}"

    - name: Read final /proc/loadavg
      ansible.builtin.slurp:
        src: /proc/loadavg
      register: _load_end

    - name: Parse final load averages
      ansible.builtin.set_fact:
        load_end: >-
          {{
            {
              'timestamp': ansible_date_time.iso8601 if (ansible_date_time is defined) else '',
              'raw': (_load_end.content | b64decode | trim),
              'avg_1':  (_load_end.content | b64decode | trim).split()[0] | float,
              'avg_5':  (_load_end.content | b64decode | trim).split()[1] | float,
              'avg_15': (_load_end.content | b64decode | trim).split()[2] | float
            }
          }}

    - name: Report start vs end (3-minute observation)
      ansible.builtin.debug:
        msg:
          started: "{{ load_start }}"
          ended: "{{ load_end }}"
